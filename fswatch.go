// Package fswatch implements a simple interface for filesystem notifications.
package fswatch

import (
	"github.com/fswatch/fswatch/internal"
	"github.com/fswatch/fswatch/internal/poller"
)

// EventType is the type of events generated by a Watcher.
type EventType int

const (
	NOTHING  = EventType(internal.NOTHING)  // nothing happened
	CREATED  = EventType(internal.CREATED)  // something was created
	DELETED  = EventType(internal.DELETED)  // something was deleted
	MOVED    = EventType(internal.MOVED)    // something was renamed/moved
	MODIFIED = EventType(internal.MODIFIED) // contents were modified
	OTHER    = EventType(internal.OTHER)    // something else (metadata?) was modified
)

const OptionGenericPoller = "-generic-poller-"

type Observer interface {
	// Observe the event ev on the watched path.
	// If an error is returned, the observer is not called again.
	Observe(path string, ev EventType) error
}

type Watcher struct {
	w watcher
}

func New(opts map[string]interface{}) *Watcher {
	if opts != nil {
		if _, ok := opts[OptionGenericPoller]; ok {
			return &Watcher{
				w: watcher(poller.New(opts)),
			}
		}
	}

	return &Watcher{
		w: newImpl(opts),
	}
}

// File watches a single file, calling the observer with any events.
func File(path string, obs Observer) (cancel func(), err error) {
	return wrapFiles(impl, []string{path}, obs)
}

// Files watches a list of files, calling the observer with any events.
func Files(paths []string, obs Observer) (cancel func(), err error) {
	return wrapFiles(impl, paths, obs)
}
